@using JobPortal.Data
@using JobPortal.Domain
@using JobPortal.Library.Enumerators
@using JobPortal.Library.Helpers
@using PagedList.Mvc
@using JobPortal.Models
@{
    ViewBag.Title = "Job Applications";
    Layout = "~/Views/Shared/_Layout.cshtml";
    UserInfoEntity user = null;
    if (User != null)
    {
        user = User.Info;
    }
    var pagedModel = ViewBag.Model as PagedList.IPagedList<JobPortal.Models.ExtendedTrackingEntity>;

    int minRowSize = ((pagedModel.PageNumber - 1) * pagedModel.PageSize) + 1;
    int totalRecord = (int)ViewBag.Rows;
    int maxRowSize = (pagedModel.PageNumber - 1) * pagedModel.PageSize + pagedModel.Count;
    if (totalRecord <= pagedModel.PageSize)
    {
        maxRowSize = totalRecord;
    }
    string username = user.Username;
    WebGrid grid = new WebGrid(ViewBag.Model, ajaxUpdateContainerId: "grid");
    UserProfile profile = MemberService.Instance.Get(username);
    Photo photo = MemberService.Instance.GetPhoto("Profile", profile.Username);
    bool allowUpload = (!string.IsNullOrEmpty(profile.Summary) && profile.CategoryId != null && !string.IsNullOrEmpty(profile.Mobile));

    UserProfile receiver = new UserProfile();

}
<style>
    .cdate {
        padding-left: 0px;
        list-style-type: none;
    }

        .cdate li {
            display: inline-block;
            width: auto;
        }
</style>
<div class="hidden-lg hidden-md" style="height:15px;"></div>
<div class="row">
    <div class="col-lg-10 col-md-10 col-sm-10">
        <div class="title-login">
            <h1 style="margin-top:-15px;">Job Applications</h1>
            Manage job applications here
        </div>
    </div>
    @*<div class="col-lg-2 col-md-2 col-sm-2" style="text-align:right">
        @Html.ActionLink("List NEW Job", "ListJob", null, new { title = "List Job", @class = "btn btn-info", @style = "width:75px; margin-top:10px;" })
    </div>*@
</div>
<div class="clear" style="height:15px"></div>
@Html.Partial("_MessagePartial")
<div class="clear" style="height:5px"></div>
<style>
    .datefield {
        width: 90px;
    }

    .cstatus {
        width: 85px;
    }

    .astatus {
        width: 90px;
    }

    .actionLinks {
        width: 200px;
    }

    .jtitle {
        width: 175px;
    }

    .usr-avtar {
        border-radius: 50%;
        border: 4px solid #ede9e9;
        width: 75px;
        height: 75px;
    }
</style>
<div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div style="font-size:1.2em; background-color:#ede9e9; padding:4px;">@ViewBag.Job.Title</div>
    </div>
</div>
<div style="margin-top:7px">
    @if (ViewBag.Model != null)
    {
        foreach (var item in ViewBag.Model)
        {
            string jlink = string.Empty;
            string appstatus = string.Empty;
            bool isConnected = false;
            bool isBlockedByMe = false;
            bool isBlockedBySomeone = false;
            bool isInvitedByMe = false;
            bool isInvitedBySomeone = false;
            UserProfile jobSeeker = null;
            List<User_Experience> f = null;
            List<User_Experience> t = null;
            Connection connection = null;
            string profile_image_url = null;
            if (item.JobseekerId != null)
            {
                jobSeeker = MemberService.Instance.Get(item.JobseekerId);
                f = MemberService.Instance.GetUserexprf(item.JobseekerId);
                t = MemberService.Instance.GetUserexprt(item.JobseekerId);
                connection = null;
                profile_image_url = Url.Action("Avtar", "Image", new { Id = item.JobseekerId });
            }

            if (jobSeeker != null)
            {
                if (!string.IsNullOrEmpty(username))
                {
                    isConnected = DomainService.Instance.IsConnected(jobSeeker.UserId, user.Id);
                    isBlockedByMe = DomainService.Instance.IsBlockedByMe(jobSeeker.UserId, user.Id);
                    isBlockedBySomeone = DomainService.Instance.IsBlockedBySomeone(jobSeeker.UserId, user.Id);
                    isInvitedByMe = DomainService.Instance.IsInvitedByMe(jobSeeker.UserId, user.Id);
                    isInvitedBySomeone = DomainService.Instance.IsInvitedBySomeone(jobSeeker.UserId, user.Id);

                    connection = ConnectionHelper.Get(jobSeeker.Username, username);
                }
                if (isBlockedByMe)
                {


                    jlink = string.Format("<a href=\"/{0}={1}\" target=\"_blank\">{2} {3}</a>", "JobSeeker/Resume12?uid", jobSeeker.UserId, jobSeeker.FirstName, jobSeeker.LastName);
                }
                else if (isBlockedBySomeone)
                {
                    jlink = string.Format("{0} {1}", jobSeeker.FirstName, jobSeeker.LastName);
                }
                else
                {
                    jlink = string.Format("<a href=\"/{0}={1}\" target=\"_blank\">{2} {3}</a>", "JobSeeker/Resume12?uid", jobSeeker.UserId, jobSeeker.FirstName, jobSeeker.LastName);
                }
            }

            string countryName = string.Empty;
            if (jobSeeker != null)
            {
                if (jobSeeker.CountryId != null)
                {
                    List country = SharedService.Instance.GetCountry(Convert.ToInt64(jobSeeker.CountryId));

                    countryName = country.Text;
                }
            }

            if ((TrackingTypes)item.Type == TrackingTypes.WITHDRAWN)
            {
                appstatus = string.Format("<span style=\"color:red\">{0} on {1}</span>", ((TrackingTypes)item.Type).GetDescription(), item.DateUpdated.ToString("MMM-dd-yyyy"));
            }
            else
            {
                appstatus = string.Format("{0} on {1}", ((TrackingTypes)item.Type).GetDescription(), item.DateUpdated.ToString("MMM-dd-yyyy"));
            }

            var constatus = string.Empty;
            if (jobSeeker != null)
            {
                constatus = ConnectionHelper.Status(jobSeeker.UserId, profile.UserId);
            }
            else
            {
                constatus = "Not Applicable";
            }

            var links = "";
            if (!string.IsNullOrEmpty(username) && jobSeeker != null)
            {
                int msg_counts = ConnectionHelper.MessageCounts(jobSeeker.UserId, user.Id);
                string view_text = "Message";
                if (msg_counts > 0)
                {
                    view_text = string.Format("Message (<span style=\"color:red;\">{0}</span>)", msg_counts);
                }
                @*<div class="accordion" id="accordionExample">
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingOne">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                                </button>
                            </h2>
                            <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample" style="">
                                <div class="accordion-body">
                                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                                </div>
                            </div>
                        </div>
                    </div>*@
                links += "<b>" + string.Format("<a href=\"{0}\" target=\"_blank\">{1}</a>", Url.Action("List", "Message", new { SenderId = jobSeeker.UserId }), view_text) + "</b>";

                if (isConnected)
                {
                    links += string.Format(" | <b><a href=\"#\" data-aurl=\"{0}\" role=\"button\" data-toggle=\"modal\" data-target=\"#discDialog\" class=\"disc\">Disconnect</a></b>", Url.Action("Disconnect", "Network", new { Id = connection.Id, redirect = Request.Url.ToString() }));
                }
                else
                {
                    if (isInvitedByMe)
                    {
                        links += string.Format(" | <b><a href=\"#\" data-aurl=\"{0}\" role=\"button\" data-toggle=\"modal\" data-target=\"#discDialog\" class=\"disc\">Disconnect</a></b>", Url.Action("Disconnect", "Network", new { Id = connection.Id, redirect = Request.Url.ToString() }));
                    }
                    else if (isInvitedBySomeone)
                    {
                        links += " | " + "<b>" + Html.ActionLink("Accept", "Accept", "Network", new { Id = connection.Id, redirect = Request.Url.ToString() }, new { title = "Accept" }).ToString() + "</b>";
                        links += string.Format(" | <b><a href=\"#\" data-aurl=\"{0}\" role=\"button\" data-toggle=\"modal\" data-target=\"#discDialog\" class=\"disc\">Disconnect</a></b>", Url.Action("Disconnect", "Network", new { Id = connection.Id, redirect = Request.Url.ToString() }));
                    }
                    else
                    {
                        if (!isConnected)
                        {
                            links += " | " + "<b>" + Html.ActionLink("Connect", "Connect", "Home", new { id = jobSeeker.UserId, redirect = Request.Url.ToString() }, new { title = "Connect" }).ToString() + "</b>";
                        }
                    }
                }
                if (isBlockedByMe == false && isBlockedBySomeone == false)
                {
                    if (User.IsInRole("Company"))
                    {
                        if (!string.IsNullOrEmpty(jobSeeker.Title) && jobSeeker.CategoryId != null && jobSeeker.SpecializationId != null)
                        {
                            bool withdrawn = (item.Type == (int)TrackingTypes.WITHDRAWN);
                            bool rejected = (item.Type == (int)TrackingTypes.REJECTED);

                            Interview interview = InterviewService.Instance.Get(jobSeeker.UserId, user.Id);
                            List<int>
                                status_list = new List<int>
                                    () { (int)InterviewStatus.INTERVIEW_IN_PROGRESS, (int)InterviewStatus.INITIATED };
                            if (interview.Id > 0 && status_list.Contains(interview.Status))
                            {
                                links += string.Format(" | <b><a href=\"{0}\" title=\"View In-progress interview details\" target=\"_blank\"><span>Interview&nbsp;In-progress</span></a></b>", Url.Action("Update", "Interview", new { id = interview.Id }));
                                links += string.Format(" | <b><a href = ~/JobSeeker/Resume12?uid=" + jobSeeker.UserId + " title = 'Download Resume' target = '_blank'> Download </a></b>");

                            }
                            else
                            {
                                if (!withdrawn && !rejected)
                                {
                                    links += " | " + "<b>" + Html.ActionLink("Interview", "Initiate", "Interview", new { id = item.Id }, new { title = "Start an Interview", @target = "_blank" }).ToString() + "</b>";
                                    links += " | " + "<b>" + Html.ActionLink("Bookmark", "BookmarkJobseeker", "Employer", new { Id = jobSeeker.UserId, redirect = "/Employer/Bookmarks" }, new { title = "Bookmark", @target = "_blank" }).ToString() + "</b>";

                                    links += string.Format(" | <b><a href = ~/JobSeeker/Resume12?uid=" + jobSeeker.UserId + " title = 'Download Resume' target = '_blank'> Download </a></b>");


                                    links += " | " + "<b>" + Html.ActionLink("Reject", "Reject", "Employer", new { id = item.Id, redirect = "Applications" }, new { title = "Reject Application" }) + "</b>";
                                }
                            }
                        }
                    }
                }
                if (isBlockedByMe)
                {
                    links += " | " + "<b>" + Html.ActionLink("Unblock", "Unblock", "Home", new { id = jobSeeker.UserId, redirect = Request.Url.ToString() }, new { @target = "_blank" }).ToString() + "</b>";
                }
                else if (isBlockedByMe == false && isBlockedBySomeone == false)
                {
                    links += " | " + string.Format("<b><a href=\"#\" data-href=\"/Home/Block?email ={0}\" data-name=\"{1}\" role=\"button\" data-toggle=\"modal\" data-target=\"#cDialog\" class=\"aBlock\" data-role=\"{2}\" data-connected=\"{3}\">Block</a></b>", jobSeeker.Username, string.Format("{0} {1}", jobSeeker.FirstName, jobSeeker.LastName), ((SecurityRoles)jobSeeker.Type).GetDescription(), isConnected);
                }
            }
            if (jobSeeker != null)
            {
                <div class="list-group">
                    <div class="list-group-item">

                        <div class="row">
                            <div class="col-md-9">
                                <div class="row">
                                    <div class="col-lg-12 col-md-12 col-sm-12">
                                        <h4>@Html.Raw(jlink)</h4>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-6 col-md-6 col-sm-6">
                                        <b>Country:</b> @Html.Raw(countryName)
                                    </div>
                                    @if (t != null && f != null)
                                    {
                                        if (t.Count > 0 && f.Count > 0)
                                        {
                                            <div class="col-lg-6 col-md-6 col-sm-6">

                                                <b>Experience:</b> @Html.Raw(string.Format("{0} year(s)", (Convert.ToInt32(t[0].ToYr) - Convert.ToInt32(f[0].FromYr)).ToString()))

                                            </div>
                                        }
                                        else
                                        {
                                            <div class="col-lg-6 col-md-6 col-sm-6">
                                                <b>Experience:</b>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="col-lg-6 col-md-6 col-sm-6">
                                            <b>Experience:</b>
                                        </div>
                                    }

                                </div>
                                <div class="row">
                                    @if (jobSeeker != null)
                                    {
                                        <div class="col-lg-6 col-md-6 col-sm-6">
                                            <b>Contact:</b> @Html.Raw(string.Concat(jobSeeker.PhoneCountryCode, jobSeeker.Phone))
                                        </div>

                                        <div class="col-lg-6 col-md-6 col-sm-6">
                                            <b>Expected CTC:</b> @Html.Raw(jobSeeker.ExpectedSalary)
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col-lg-6 col-md-6 col-sm-6">
                                            <b>Contact:</b>
                                        </div>

                                        <div class="col-lg-6 col-md-6 col-sm-6">
                                            <b>Expected CTC:</b>
                                        </div>
                                    }
                                </div>
                                <div class="row">
                                    @if (jobSeeker != null)
                                    {
                                        <div class="col-lg-6 col-md-6 col-sm-6">
                                            <b>Email:</b> @Html.Raw(jobSeeker.Username)
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col-lg-6 col-md-6 col-sm-6">
                                            <b>Email:</b>
                                        </div>

                                    }
                                    <div class="col-lg-6 col-md-6 col-sm-6">
                                        <b>Availability:</b>  @Html.Raw(constatus)
                                    </div>
                                </div>

                            </div>
                            <div class="col-md-3">
                                <div class="row text-center">
                                    <div class="col-lg-12 col-md-12 col-sm-12">
                                        <img src="@profile_image_url" class="usr-avtar" />
                                    </div>
                                </div>
                                <div class="row text-center">
                                    <div class="col-lg-12 col-md-12 col-sm-12">
                                        <b>Match:</b> 67%
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12">
                                @Html.Raw(links)
                            </div>
                        </div>

                    </div>
                </div>
            }
        }
    }
</div>

<div style="text-align:center; margin-top: -15px;">

    @Html.PagedListPager(pagedModel, PageNumber => Url.Action("ApplicationDetails",
            new RouteValueDictionary()
            {
                { "PageNumber" , PageNumber},
                { "Id" , @ViewBag.Job.Id}
            }),
            PagedListRenderOptions.ClassicPlusFirstAndLast)
</div>
