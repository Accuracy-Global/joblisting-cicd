@model JobPortal.Web.Models.JobListingModel
@using JobPortal.Domain

@{
    ViewBag.Title = "List Job";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    btn-info.disabled, .btn-info[disabled], fieldset[disabled] .btn-info, .btn-info.disabled:hover, .btn-info[disabled]:hover, fieldset[disabled] .btn-info:hover, .btn-info.disabled:focus, .btn-info[disabled]:focus, fieldset[disabled] .btn-info:focus, .btn-info.disabled:active, .btn-info[disabled]:active, fieldset[disabled] .btn-info:active, .btn-info.disabled.active, .btn-info[disabled].active, fieldset[disabled] .btn-info.active {
        background-color: #71c3e0;
        border-color: #ffffff;
    }
</style>
<style>
    .editor {
        box-shadow: 0 0 2px #CCC;
        min-height: 150px;
        overflow: auto;
        padding: 1em;
        resize: vertical;
        outline: none;
        border: 1px solid #CCC;
    }

    .toolbar {
        border: 1px solid #CCC;
        text-align: left;
        background-color: #f2f2f2;
        padding: 2px;
    }

        .toolbar a,
        .fore-wrapper,
        .back-wrapper {
            font-family: 'Candal';
            border-radius: 1px;
            color: black;
            width: 1.5em;
            display: inline-block;
            text-decoration: none;
        }

            .toolbar a:hover,
            .fore-wrapper:hover,
            .back-wrapper:hover {
                background: #f2f2f2;
                border-color: #8c8c8c;
            }

    a[data-command='redo'],
    a[data-command='strikeThrough'],
    a[data-command='justifyFull'],
    a[data-command='insertOrderedList'],
    a[data-command='outdent'],
    a[data-command='p'],
    a[data-command='superscript'] {
        margin-right: 5px;
        border-radius: 0 3px 3px 0;
    }

    a[data-command='undo'],
    .fore-wrapper,
    a[data-command='justifyLeft'],
    a[data-command='insertUnorderedList'],
    a[data-command='indent'],
    a[data-command='h1'],
    a[data-command='subscript'] {
        border-radius: 3px 0 0 3px;
    }

    a.palette-item {
        height: 1em;
        border-radius: 3px;
        margin: 2px;
        width: 1em;
        border: 1px solid #CCC;
    }

        a.palette-item:hover {
            border: 1px solid #CCC;
            box-shadow: 0 0 3px #333;
        }

    .fore-palette,
    .back-palette {
        display: none;
    }

    .fore-wrapper,
    .back-wrapper {
        display: inline-block;
        cursor: pointer;
    }

        .fore-wrapper:hover .fore-palette,
        .back-wrapper:hover .back-palette {
            display: block;
            float: left;
            position: absolute;
            padding: 3px;
            width: 160px;
            background: #FFF;
            border: 1px solid #DDD;
            box-shadow: 0 0 5px #CCC;
            height: 70px;
        }

    .fore-palette a,
    .back-palette a {
        background: #FFF;
        margin-bottom: 2px;
    }
</style>

@using (Html.BeginForm("PostListJob", "Employer", FormMethod.Post, new { Id = "JobPostForm" }))
{
    <input type="hidden" id="ReturnUrl" name="ReturnUrl" value="@Model.ReturnUrl" />
    <input type="hidden" id="PackageId" name="PackageId" value="@Model.PackageId" />
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <div class="title-login">
                <h1 style="margin-top:-15px;">
                    List Job
                </h1>
                List Job here
            </div>
        </div>        
    </div>
    <div class="clear" style="height:15px"></div>
    @Html.ValidationSummary(true)
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <div class="form-group">
                @Html.LabelFor(model => model.Title) <small>(Min. 15 and Max. 45 characters)</small>

                @Html.TextBoxFor(model => model.Title, new { title = "Title", placeholder = "TITLE (For example, Software Engineer)", @class = "form-control _Value", @maxlength = 45, @required = "required" })
                @Html.ValidationMessageFor(model => model.Title)
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="form-group">
                @Html.LabelFor(model => model.CategoryId)

                @Html.DropDownListFor(model => model.CategoryId, new SelectList(Model.Categories, "Id", "Name", Model.CategoryId), "SELECT CATEGORY", new { title = "Category", @class = "form-control ", @required = "required" })
                @Html.ValidationMessageFor(model => model.CategoryId)
            </div>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="form-group">
                @Html.LabelFor(model => model.SpecializationId)

                @Html.DropDownListFor(model => model.SpecializationId, new SelectList(Model.Specialisations, "Id", "Name", Model.SpecializationId), "SELECT SPECIALIZATION", new { title = "Specialization", @class = "form-control ", @required = "required" })
                @Html.ValidationMessageFor(model => model.SpecializationId)
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="form-group">
                @Html.LabelFor(model => model.CountryId)

                @Html.DropDownListFor(model => model.CountryId, new SelectList(Model.Countries, "Id", "Text", Model.CountryId), "SELECT COUNTRY", new { title = "Country", @class = "form-control", @required = "required" })
                @Html.ValidationMessageFor(model => model.CountryId)
            </div>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="form-group">
                @Html.LabelFor(model => model.StateId)

                @Html.DropDownListFor(model => model.StateId, new SelectList(Model.States, "Id", "Text"), "SELECT STATE", new { title = "State", @class = "form-control " })
                @Html.ValidationMessageFor(model => model.StateId)
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="form-group">
                @Html.LabelFor(model => model.City)

                @Html.TextBoxFor(model => model.City, new { title = "City", placeholder = "CITY", @class = "form-control _Value", @maxlength = 50 })
                @Html.ValidationMessageFor(model => model.City)
            </div>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Zip)

                @Html.TextBoxFor(model => model.Zip, new { title = "Zip", placeholder = "ZIP", @class = "form-control _Value", @maxlength = 15 })
                @Html.ValidationMessageFor(model => model.Zip)
            </div>
            <div id="divzip" style="color:red;font-weight:bold;"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="form-group">
                @Html.Label("Experience")
                <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-6">
                        @Html.Label("Minimum")
                        @Html.DropDownListFor(model => model.MinimumExperience, Model.ExperienceList(), "SELECT", new { title = "Minimum Experience", @class = "form-control", @required = "required" })
                        @Html.ValidationMessageFor(model => model.MinimumExperience)
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6">
                        @Html.Label("Maximum")
                        @Html.DropDownListFor(model => model.MaximumExperience, Model.ExperienceList(1), "SELECT", new { title = "Maximum Experience", @class = "form-control", @required = "required" })
                        @Html.ValidationMessageFor(model => model.MaximumExperience)
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="form-group">
                @Html.Label("Salary")
                <div class="row">
                    <div class="col-lg-4 col-md-4 col-sm-4">
                        @Html.Label("Currency")
                        @Html.DropDownListFor(model => model.SalaryCurrency, Model.CurrencySymbols, "SELECT", new { title = "Salary Currency", @class = "form-control" })
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-4">
                        <label>Min. Per Year</label>
                        @Html.TextBoxFor(model => model.MinimumSalary, new { title = "Minimum Salary Per Year", @class = "form-control", @maxlength = 11 })
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-4">
                        <label>Max. Per Year</label>
                        @Html.TextBoxFor(model => model.MaximumSalary, new { title = "Maximum Salary Per Year", @class = "form-control", @maxlength = 11 })
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="form-group">
                <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-6">
                        @Html.Label("Age From")
                        @Html.DropDownListFor(model => model.MinimumAge, Model.AgeList(18, -1), "SELECT", new { title = "Minimum Age", @class = "form-control" })
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6">
                        @Html.Label("Age To")
                        @Html.DropDownListFor(model => model.MaximumAge, Model.AgeList(20), "SELECT", new { title = "Maximum Age", @class = "form-control" })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.EmploymentType)

                        @Html.DropDownListFor(model => model.EmploymentType, new SelectList(Model.EmploymentTypes, "Id", "Text"), "SELECT", new { title = "Employment Type", @class = "form-control", @required="required" })
                        @Html.ValidationMessageFor(model => model.EmploymentType)
                    </div>
                </div>
                <div class="col-lg-6 col-md-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.QualificationId)
                        @Html.DropDownListFor(model => model.QualificationId, new SelectList(Model.Qualifications, "Id", "Text"), "SELECT", new { title = "Highest Qualification", @class = "form-control" })
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="clear" style="height:15px;"></div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <div class="form-group">
                <h4 style="line-height: 0px;">
                    <b>Description For Searches </b><small>(The short description will appear in the searches. Min. 25 and Max. 100)</small>
                </h4>
                @Html.TextBoxFor(model => model.Summary, new { title = "Description For Searches", @class = "form-control", @maxlength = 100, @required = "required" })
                @Html.ValidationMessageFor(model => model.Summary)
            </div>
        </div>
    </div>
    <div class="clear" style="height:15px;"></div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <div class="form-group">
                <h4 style="line-height: 0px;">
                    <b>@Html.LabelFor(model => model.Description)</b> <small>(Min. 250 and Max. 2000 characters)</small>
                </h4>
                @Html.TextAreaFor(model => model.Description, new { title = "Job Description", @class = "form-control", @maxlength = 2000, @required = "required", @style = "height:185px;" })
                @Html.ValidationMessageFor(model => model.Description)
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <h4 style="line-height: 0px;">
                <b>@Html.LabelFor(model => model.Requirements)</b> <small>(Min. 100 and Max. 2000 characters)</small>
            </h4>
            <input type="hidden" id="Requirements" name="Requirements" />
            <div id="SummaryEditor">
                <div class="toolbar">
                    <a href="#" data-command='indent'>
                        <svg style="width:21px; height:21px;">
                            <g id="format-indent-increase"><path d="M3 21h18v-2H3v2zM3 8v8l4-4-4-4zm8 9h10v-2H11v2zM3 3v2h18V3H3zm8 6h10V7H11v2zm0 4h10v-2H11v2z" /></g>
                        </svg>
                    </a>
                    <a href="#" data-command='outdent'>
                        <svg style="width:21px; height:21px;">
                            <g id="format-indent-decrease"><path d="M11 17h10v-2H11v2zm-8-5l4 4V8l-4 4zm0 9h18v-2H3v2zM3 3v2h18V3H3zm8 6h10V7H11v2zm0 4h10v-2H11v2z" /></g>
                        </svg>
                    </a>
                    <a href="#" data-command='insertUnorderedList'><svg style="width:21px; height:21px;"><g id="format-list-bulleted"><path d="M4 10.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0-6c-.83 0-1.5.67-1.5 1.5S3.17 7.5 4 7.5 5.5 6.83 5.5 6 4.83 4.5 4 4.5zm0 12.17c-.74 0-1.33.6-1.33 1.33s.6 1.33 1.33 1.33 1.33-.6 1.33-1.33-.59-1.33-1.33-1.33zM7 19h14v-2H7v2zm0-6h14v-2H7v2zm0-8v2h14V5H7z" /></g></svg></a>
                    <a href="#" data-command='insertOrderedList'><svg style="width:21px; height:21px;"><g id="format-list-numbered"><path d="M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z" /></g></svg></a>
                </div>
                <div class="editor form-control" style="height:200px; overflow-x:hidden; overflow-y:auto" data-field="Requirements" contenteditable>
                    @Model.Requirements
                </div>
                <div id="chars_left"></div>
            </div>         
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12 text-center">
            <input type="submit" value="Submit" class="btn btn-info" style="width:75px; margin-top:10px;" />@*&nbsp;&nbsp;&nbsp;&nbsp;<a href="@Model.ReturnUrl" class="btn btn-default" style="width:75px; margin-top:10px;">BACK</a>*@
        </div>
    </div>
    <div class="clear" style="height:30px;"></div>
}

<script type="text/javascript">    
    $(document).ready(function () {

        var max_chars = 2000; //max characters
        var max_for_html = 2000; //max characters for html tags
        var allowed_keys = [8, 13, 16, 17, 18, 20, 33, 34, 35, 36, 37, 38, 39, 40, 46];
        var chars_without_html = 0;
        var chars_with_html = 0;

        function alarmChars() {
            if (chars_without_html > (max_chars - 25)) {
                $('#chars_left').css('color', 'red');
            } else {
                $('#chars_left').css('color', 'gray');
            }
        }

        var colorPalette = ['000000', 'FF9966', '6699FF', '99FF66', 'CC0000', '00CC00', '0000CC', '333333', '0066FF', 'FFFFFF'];
        var forePalette = $('.fore-palette');
        var backPalette = $('.back-palette');

        for (var i = 0; i < colorPalette.length; i++) {
            forePalette.append('<a href="#" data-command="forecolor" data-value="' + '#' + colorPalette[i] + '" style="background-color:' + '#' + colorPalette[i] + ';" class="palette-item"></a>');
            backPalette.append('<a href="#" data-command="backcolor" data-value="' + '#' + colorPalette[i] + '" style="background-color:' + '#' + colorPalette[i] + ';" class="palette-item"></a>');
        }

        $(".editor").bind("paste", function (e) {
            var pastedData = e.originalEvent.clipboardData.getData('text');
            document.execCommand('insertText', false, pastedData);
            return false;
        });

        $(".editor").mouseout(function () {
            var txt = $(this).text();
            console.log(txt);
            if ($.trim(txt).length > 0) {
                $("#" + $(this).data("field")).val($(this).html());
            }
        });

        $(".editor").keydown(function (e) {            
            chars_with_html = $(this).html().length;         
            var key = e.which;            
            $('#chars_left').html("<b style=\"color:red\">Remaining characters:</b> " + (max_for_html - chars_with_html));

            if (allowed_keys.indexOf(key) != -1) {
                alarmChars();
                return;
            }

            if (chars_with_html > max_for_html) {
                return false;
            }
            alarmChars();
        });

        $(".editor").blur(function () {
            var txt = $(this).text();
            console.log(txt);
            if ($.trim(txt).length > 0) {
                $("#" + $(this).data("field")).val($(this).html());
            }
        });

        $('.toolbar a').click(function (e) {
            var command = $(this).data('command');
            if (command == 'h1' || command == 'h2' || command == 'p') {
                document.execCommand('formatBlock', false, command);
            }
            if (command == 'forecolor' || command == 'backcolor') {
                document.execCommand($(this).data('command'), false, $(this).data('value'));
            }
            if (command == 'createlink' || command == 'insertimage') {
                url = prompt('Enter the link here: ', 'http:\/\/');
                document.execCommand($(this).data('command'), false, url);
            } else document.execCommand($(this).data('command'), false, null);

            return false;
        });

        chars_without_html = $.trim($(".editor").html().replace(/(<([^>]+)>)/ig, "")).length;
        $('#chars_left').html("<b style=\"color:#000\">Remaining characters:</b> " + (max_chars - chars_without_html));
        alarmChars();

        $("#MinimumAge").change(function () {
            $("#MaximumAge").empty();
            $("#MaximumAge").append("<option value =\"\">SELECT</option>");
            $.post('@Url.Action("GetAgeList", "JsonHelper")', { age: $('option:selected', $(this)).val() },
                        function (result) {
                            if (result.length != 0) {
                                $(result).each(function () {
                                    $("#MaximumAge").append("<option value =" + this.Value + ">" + this.Text + "</option>");
                                });
                            }
                        });
        });

        $("#MinimumExperience").change(function () {
            $("#MaximumExperience").empty();
            $("#MaximumExperience").append("<option value =\"\">SELECT</option>");
            $.post('@Url.Action("GetExperienceList", "JsonHelper")', { exp: $('option:selected', $(this)).val() },
                    function (result) {
                        if (result.length != 0) {
                            $(result).each(function () {
                                $("#MaximumExperience").append("<option value =" + this.Value + ">" + this.Text + "</option>");
                            });
                        }
                    });
        });

        //Fetch State on change of dropdownlist value.
        $("#CountryId").change(function () {
            $("#StateId").empty();
            $("#StateId").append("<option value =\"\">SELECT STATE</option>");
            $.post('@Url.Action("GetStates", "JsonHelper")', { countryid: $('option:selected', $(this)).val() },
                    function (result) {
                        if (result.length != 0) {
                            $(result).each(function () {
                                $("#StateId").append("<option value =" + this.Value + ">" + this.Text + "</option>");
                            });
                        }
                    });
        });

        //Fetch Subspecialization on change of dropdownlist value.
        $("#CategoryId").change(function () {
            $("#SpecializationId").empty();
            $("#SpecializationId").append("<option value =\"\">SELECT SPECIALIZATION</option>");
            $.post('@Url.Action("GetSpecializations", "JsonHelper")', { categoryid: $('option:selected', $(this)).val() },
                function (result) {
                    if (result.length != 0) {
                        $(result).each(function () {
                            $("#SpecializationId").append("<option value =" + this.Value + ">" + this.Text + "</option>");
                        });
                    }
            });
        });
    });

    $('._reset').click(function () {
        $('._Value').val('');
    })

    $(".submitjob").click(function () {
        var flag = false;

        var jsonForm = $("#JobPostForm").serializeObject();
        if ($("#JobPostForm")[0].checkValidity()) {
            $.post("/employer/postjob", jsonForm, function (result) {
                if (result > 0) {
                    toastr.info(jsonForm.Title + " job has been submited successfully.<br/>It is in approval process, we will inform you once it is approved!");
                    window.location.href = "@Url.Action("Index","Employer")";
                } else {
                    toastr.error("Error occured listing " + jsonForm.Title + " job!");
                }
            });
            flag = false;
        } else {
            flag = true;
        }
        return flag;
    });

</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
