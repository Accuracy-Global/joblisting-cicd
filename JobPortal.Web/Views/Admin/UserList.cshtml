@using JobPortal.Domain
@using JobPortal.Data
@using JobPortal.Library.Enumerators;
@using JobPortal.Library.Helpers;
@using System.Collections
@using PagedList.Mvc
@{
    ViewBag.Title = ViewBag.UserType + " from " + ViewBag.Country.Text;
    Layout = "~/Views/Shared/_Layout.cshtml";

    var pagedModel = ViewBag.Model as PagedList.IPagedList<JobPortal.Data.UserProfile>;

    int minRowSize = ((pagedModel.PageNumber - 1) * pagedModel.PageSize) + 1;
    int totalRecord = (int)ViewBag.Rows;
    int maxRowSize = (pagedModel.PageNumber - 1) * pagedModel.PageSize + pagedModel.Count;
    if (totalRecord <= pagedModel.PageSize)
    {
        maxRowSize = totalRecord;
    }
}
<script src="~/Scripts/highcharts.js"></script>
<style>
    .cdate {
        padding-left: 0px;
        list-style-type: none;
    }

        .cdate li {
            display: inline-block;
            width: auto;
        }
</style>
<div class="section">
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <div class="title-login">
                <h1 style="margin-top:-15px">User Accounts</h1>
                Manage user accounts here
            </div>
        </div>
    </div>
    <div class="clear" style="height:15px;"></div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            @if (ViewBag.TypeId == 3) { 
                <span style="font-size:1em; font-weight:bold">Last 7 days Registrations for @ViewBag.Country.Text</span>
            }
            else
            {
                <span style="font-size:1em; font-weight:bold">Jobseeker Registrations for @ViewBag.Country.Text</span>
            }
            <div id="container1" class="list-group-item" style="height:300px;">

            </div>
        </div>
    </div>
    <div class="clear" style="height:15px;"></div>
    @using (Html.BeginForm("UserList", "Admin", method: FormMethod.Post))
    {
        <div class="row">
            <div class="col-lg-4 col-md-4 col-sm-4">
                @Html.Label("Search By Name")
                <input type="text" id="Name" name="Name" placeholder="SEARCH BY NAME" class="form-control" />
                <input type="hidden" name="TypeId" id="TypeId" value="@ViewBag.TypeId" />
                <input type="hidden" name="CountryId" id="CountryId" value="@ViewBag.Country.Id" />
            </div>
            <div class="col-lg-8 col-md-8 col-sm-8">
                <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-6">
                        <div class="form-group">
                            @Html.Label("From Date")
                            <ul class="cdate" title="From Date">
                                <li>
                                    @Html.DropDownList("fd", new SelectList(SharedService.Instance.GetDayList()), "DAY", new { @class = "form-control", @style = "padding:5px;width:64px;" })
                                </li>
                                <li>
                                    @Html.DropDownList("fm", new SelectList(SharedService.Instance.GetMonthList(), "Id", "Name"), "MONTH", new { @class = "form-control", @style = "padding:5px;" })
                                </li>
                                <li>
                                    @Html.DropDownList("fy", new SelectList(SharedService.Instance.GetYearList(false, DateTime.Now.Year - 1)), "YEAR", new { @class = "form-control", @style = "padding:5px;width:70px;" })
                                </li>
                            </ul>
                            <div id="fromDateError" style="color:red;"></div>
                        </div>

                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6">
                        <div class="form-group">
                            @Html.Label("To Date")
                            <ul class="cdate" title="To Date">
                                <li>
                                    @Html.DropDownList("td", new SelectList(SharedService.Instance.GetDayList()), "DAY", new { @class = "form-control", @style = "padding:5px;width:64px;" })
                                </li>
                                <li>
                                    @Html.DropDownList("tm", new SelectList(SharedService.Instance.GetMonthList(), "Id", "Name"), "MONTH", new { @class = "form-control", @style = "padding:5px;" })
                                </li>
                                <li>
                                    @Html.DropDownList("ty", new SelectList(SharedService.Instance.GetYearList(false, DateTime.Now.Year - 1)), "YEAR", new { @class = "form-control", @style = "padding:5px;width:70px;" })
                                </li>
                            </ul>
                            <div id="toDateError" style="color:red;"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-push-10">
                <div class="form-group">
                    <input id="Search" type="submit" value="Search" class="btn btn-info" style="width:105px;" />
                </div>
            </div>
        </div>
    }
    <div class="clear" style="height:15px;"></div>
    @{
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12">
                <div style="font-size:1.2em; background-color:#ede9e9; padding:4px;">@ViewBag.Country.Text</div>
            </div>
        </div>
        WebGrid grid = new WebGrid(@ViewBag.Model, ajaxUpdateContainerId: "grid");
        List<WebGridColumn>
            columns = new List<WebGridColumn>
                ();
        columns.Add(new WebGridColumn()
        {
            ColumnName = "Name",
            CanSort = false,
            Header = "Name",
            Format = (item) =>
            {
                return Html.Raw(MemberService.Instance.ProfileLink(item.Username));
            }
        });
        columns.Add(new WebGridColumn()
        {
            ColumnName = "Type",
            CanSort = false,
            Header = "Type",
            Format = (item) =>
            {
                string type = string.Empty;
                if (item.Type == 4)
                {
                    type = "Jobseeker";
                }
                else if (item.Type == 5)
                {
                    type = "Employers";
                }
                return type;
            }
        });
        if (ViewBag.UserType != "Company User Accounts")
        {
            columns.Add(new WebGridColumn()
            {
                ColumnName = "Gender",
                CanSort = false,
                Header = "Gender",
            });
        }

        columns.Add(new WebGridColumn()
        {
            ColumnName = "Country",
            CanSort = false,
            Header = "Country",
            Format = (item) =>
            {
                List country = SharedService.Instance.GetCountry(item.CountryId);
                return country != null ? country.Text : "";
            }
        });
        columns.Add(new WebGridColumn()
        {
            ColumnName = "Status",
            CanSort = false,
            Header = "Status",
            Format = (item) =>
            {
                string status = string.Empty;
                if (item.IsConfirmed)
                {
                    status = "Verified";
                }
                else
                {
                    status = "Not Verified";
                }
                return status;
            }
        });
        columns.Add(new WebGridColumn()
        {
            ColumnName = "DateCreated",
            CanSort = false,
            Header = "Registered On",
            Format = (item) =>
            {
                return item.DateCreated.ToString("MMM-dd-yyyy");
            }
        });

        columns.Add(new WebGridColumn()
        {
            ColumnName = "Actions",
            CanSort = false,
            Header = "Action(s)",
            Format = (item) =>
            {
                string links = string.Empty;
                SecurityRoles role = (SecurityRoles)item.Type;
                switch (role)
                {
                    case SecurityRoles.Employers:
                        links += string.Format("<b>{0}</b>", Html.ActionLink("Manage", "ManageCompany", new { Id = item.UserId }, new { title = "Manage Company Profile", @class = "edit", @target = "_blank" }).ToString());
                        break;
                    case SecurityRoles.Jobseeker:
                        links += string.Format("<b>{0}</b>", Html.ActionLink("Manage", "ManageIndividual", new { Id = item.UserId }, new { title = "Manage Individual Profile", @class = "edit", @target = "_blank" }).ToString());
                        break;
                }
                return Html.Raw(links);
            }
        });

    }
    <div id="container-grid" class="table-responsive">
        @grid.GetHtml(htmlAttributes: new { id = "grid", @style = "width:100%" }, tableStyle: "table table-bordered table-hover",
                     columns: columns)
        
    </div>
</div>
<style>
    .pagination {
        margin: 0;
    }
</style>
<div class="row">
    <div class="col-lg-3 col-md-3 col-sm-3">
        <div style="padding-top:7px; padding-bottom:7px;">
            <b><span title="Showing @pagedModel.FirstItemOnPage to @pagedModel.LastItemOnPage of @pagedModel.TotalItemCount">@pagedModel.FirstItemOnPage to @pagedModel.LastItemOnPage of @pagedModel.TotalItemCount</span></b>
        </div>
    </div>
    <div class="col-lg-9 col-md-9 col-sm-9">
        <div class="pull-right">
           @Html.PagedListPager(pagedModel, PageNumber => Url.Action("UserList",
                new RouteValueDictionary()
                {
                    { "PageNumber" , PageNumber},
                    { "Name", Request["Name"] },
                    { "TypeId" , Request["TypeId"]},
                    { "CountryId", Request["CountryId"] },
                    { "fd" , Request["fd"]},
                    { "fm" , Request["fm"]},
                    { "fy" , Request["fy"]},
                    { "td" , Request["td"]},
                    { "tm" , Request["tm"]},
                    { "ty" , Request["ty"]},
                }),
                PagedListRenderOptions.ClassicPlusFirstAndLast)
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {

        var companies = 0;
        var males = 0;
        var females = 0;
        var dataPoints = [];
        var type=@ViewBag.TypeId;
        if(type==3){
            $.getJSON("/JsonHelper/GetUserCounts?CountryId=@ViewBag.Country.Id&typeId=@ViewBag.TypeId", function (data) {
                var total = 0;
                dataPoints = [];
                $.each(data, function (key, value) {
                    dataPoints.push({ name: key, y: value });
                    total += value;
                });

                $('#container1').highcharts({
                    colors: ['#FFB61C', '#87D42E', '#475d8f'],
                    chart: {
                        plotBackgroundColor: null,
                        plotBorderWidth: null,
                        plotShadow: false,
                        type: 'pie'
                    },
                    events: {
                        click: function () {
                            alert('chart clicked');
                        }
                    },
                    title: {
                        text: ''
                    },
                    tooltip: {
                        pointFormat: '{series.name}: <b>{point.y}</b>'
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            cursor: 'pointer',
                            depth: 10,
                            dataLabels: {
                                enabled: true,
                                distance: -30,
                                format: '{point.y}',
                                shadow: false,
                                style: {
                                    textShadow: "0 0 0px contrast, 0 0 0px contrast",
                                }
                            }
                        }
                    },
                    series: [{
                        type: 'pie',
                        name: 'Registrations',
                        data: dataPoints,
                        showInLegend: true,
                        dataLabels: {
                            enabled: true,
                            distance: -30,
                            format: '{point.y}',
                            shadow: false
                        }
                    }]
                });
                if (total == 0) {
                    $('#container1').html("<div style=\"padding-top:100px; color:red\"><b>No Registrations</b></div>");
                    $('#container1').addClass("text-center");
                }
            });
        }else{
            dataPoints.push({ name: "Males", y: @ViewBag.Males });
            dataPoints.push({ name: "Females", y: @ViewBag.Females });
            dataPoints.push({ name: "Total", y: @(ViewBag.Males + ViewBag.Females)});

            $('#container1').highcharts({
                colors: ['#FFB61C', '#87D42E', '#475d8f'],
                chart: {
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: false,
                    type: 'pie'
                },
                title: {
                    text: ''
                },
                tooltip: {
                    pointFormat: '{series.name}: <b>{point.y}</b>'
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        depth: 10,
                        dataLabels: {
                            enabled: true,
                            distance: -30,
                            format: '{point.y}',
                            shadow: false,
                            style: {
                                textShadow: "0 0 0px contrast, 0 0 0px contrast",
                            }
                        }
                    }
                },
                series: [{
                    type: 'pie',
                    name: 'Registrations',
                    data: dataPoints,
                    showInLegend: true,
                    dataLabels: {
                        enabled: true,
                        distance: -30,
                        format: '{point.y}',
                        shadow: false
                    }
                }]
            });
        }

        $("#Search").click(function () {
            var isValidStartDate = isValidDate($("#fd").val(), $("#fm").val(), $("#fy").val());
            var isValidEndDate = isValidDate($("#td").val(), $("#tm").val(), $("#ty").val());

            if (isValidStartDate) {
                $("#fromDateError").html("");
                $("#fromDateError").show();
                $("#Search").enabled = true;
            } else {
                $("#fromDateError").html("Provide correct from date!");
                $("#fromDateError").show();
                $("#Search").enabled = false;
            }

            if (isValidEndDate) {
                $("#toDateError").html("");
                $("#toDateError").show();
                $("#Search").enabled = true;
            } else {
                $("#toDateError").html("Provide correct to date!");
                $("#toDateError").show();
                $("#Search").enabled = false;
            }
            return (isValidStartDate == true && isValidEndDate == true);
        });
    });
</script>
